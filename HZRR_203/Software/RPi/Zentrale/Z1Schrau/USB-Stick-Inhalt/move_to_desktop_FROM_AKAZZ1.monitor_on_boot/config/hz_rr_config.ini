[APT]
apt_get_list                = guizero,numpy,pysimplegui,matplotlib,varname
install_dependencies        = True

[system]
name                        = HR2
monitor_name                = Monitor
version                     = 2
# serial port
serialPort_WIN              = COM4
serialPort_PIthree          = /dev/serial/by-path/platform-3f980000.usb-usb-0:1.1.3:1.0-port0
serialPort_PIfour           = /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.4:1.0-port0

# From where to read the heizkreisconfig
#PI = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/config/heizkreis.conf
confPath_local_linux        = /home/pi/Desktop/Monitor/PYTHONUSB/move_to_desktop.monitor_on_boot/config/heizkreis.conf
confPath_USB_linux          = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/config/heizkreis.conf
confPath_local_win          = D:\\coding\\move_to_desktop.monitor_on_boot\\config\\heizkreis.conf
confpath_USN_win            = D:\\meh
conf_set_on_usb             = True

#PI HOST PATH = /etc/hostname
hostPath                    = /etc/hostname

#PI
#logPath_local      = /home/pi/Desktop/Monitor/PYTHONUSB/log/
#logPath_USB        = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/log/
# log path on the SD card
logPath_local_LINUX         = /home/pi/Desktop/Monitor/PYTHONUSB/log/
logPath_local_WIN           = D:\\coding\\move_to_desktop.monitor_on_boot\\log\\

# log path on the usb stick
logPath_USB_LINUX           = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/log/
logPath_USB_WIN             = D:\\coding\\move_to_desktop.monitor_on_boot\\log\\

# if this var is set, the logging will be done on the 'logPath_USB' stick
# otherwise it loggs to 'logPath_local'
logOnUSB                    = True

# the mask of the log file - this is how it will be called by the function
logFileNameMask             = newLogStart_%__HSTNAME__%_%Y-%m-%d_%H-%M-%S.dat
logFileNameMaskLogFile      = nlogHZ-RR_%__HSTNAME__%_%Y%m%d_%H%M%S.dat

# the path to the log_file_starter script | will possible be replaced
logStartScriptPath          = hz_rr_log_start2.sh

# the path to the monitor
logMonitorDirectPath        = hz_rr_monitor_direct02_b.py

# the path to the plot generator (old file: hz_rr_plot10.py)
logPlotPath                 = hr2_show_log03c.py

# the path where the plotlog file does read the logfiles and generate the output
logPlotPath_logFolder_linux = /home/pi/Desktop/Monitor/PYTHONUSB/log/plotlog/
logPlotPath_logFolder_usb_l = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/log/plotlog/
logPlotPath_logFolder_win   = D:\\coding\\move_to_desktop.monitor_on_boot\\log\\plotlog\\
logPlotPath_logFolder_usb_w = D:\\coding\\move_to_desktop.monitor_on_boot\\log\\plotlog\\
logPlotPath_logOnUsb        = False

# time until new log file
logFileTime                 = 60.0*60.0*6.0

# time until new log event in seconds
logTime                     = 240.0

# if the monitor tries to get data, but is blocked cause the serial bus is
# already in use, this is the delay he waits until retrying.
monitorBusRetryDelay        = 0.5

[SerialBus]
# how many tries to redo read_stat on error
max_read_stat_retry_count   = 2

# serial bus timeout| default: 0.5 -> lets try 0.3
ser_bus_timeout             = 0.3

# serial bus - rx timeout | default 1 -> lets try 0.5
ser_bus_rx_timeout          = 0.5

# serial bus - net dialog maxium repeats | default: 3 -> lets try 2
ser_bus_netdiag_max_try     = 2

# serial bus - baudrate
ser_bus_baud_rate           = 115200

# maximum time the queue handler executes an action & waits for a response in seconds.
queue_handler_max_ttl       = 300

[DEBUG-SETTINGS]
# activates custom debugs of lvl 1-11 and 0 - -7 currently
custom_debug_state          = 2
# activates selective debug overwrite (only those debug-levels will be print)
selective_debug_overwrite   = 0
# short debug output - should reduce load on pi (DOES NOT AFFECT VERBOSE FILE LOGGING!)
logger_print_shortener      = True
# max debug output length
logger_print_shortener_max_l= 300
# acts like: <loggerdata>[logger_print_shortener_from_left(*-1):logger_print_shortener_max_length]
logger_print_shortener_from_left= 70

#verbose config log + windows
verbose_log_enable          = False
verbose_log_max_cdb         = 3
verbose_log_linux           = /media/pi/PYTHONUSB/move_to_desktop.monitor_on_boot/verbose/
verbose_log_windows         = D://coding//move_to_desktop.monitor_on_boot//verbose
verbose_log_filemask        = VERBOSE_%Y-%m-%d_%H-%M-%S.dat

[LOGGER-SETTINGS]
# check if the people are freezing because of malfunction in nano
# check every X seconds     300
valve_motor_failsafe_timer = 300
# current temperature + the following values = highest acceptable temperature / K
max_pos_difference          = 3
# current temperature - the following value = lowest acceptable temperature / K
max_neg_difference          = -3
# time of the valve being adjusted / msec
max_valve_calib_runtime     = 500
# default soll value - if it is being returned as 0.0 by the nano for whatever reason / degC
default_soll_value          = 44
# error checking to send "VORLAUF TEMP" - set minimal and maximal, else dont send!
min_vlf_temp_to_send        = 20
max_vlf_temp_to_send        = 100

[SEND_TVOR_MODIFIER]
set_send_tvor               = VM

[module_log_settings]
tvor_log_name               = _TVOR_SENDS_LOG.dat
valve_assist_log_name       = _VALVE_ASSIST_LOG.dat
terminal_log_name           = _TERMINAL_LOG.dat
exception_log_name          = _EXCEPTIONS_LOG.dat

[MODULES]
nano_valve_assistant        = True
nano_valve_log_a_enabled    = True
terminal_log_enabled        = True
send_tvor_log_enabled       = True
exception_error_log_enabled = True

[nano_valve_assistant]
# to which regler should the request been send (later will be managed by heizkreis.ini)
send_to_regler              = 1,3

[Terminal]
#on a small resolution, take a smaller number..
line_length                 = 65

[DEBUG]

[CACHE]
